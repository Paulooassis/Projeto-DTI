package Market;

package Market;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class ProdutoPerecivel extends Produto {
	private static final double DESCONTO = 0.25;
	private static final int PRAZO_DESCONTO = 7;
	private LocalDate dataDeValidade;
	
	public ProdutoPerecivel(String desc, double precoCusto, double margemLucro, LocalDate validade) {
		super(desc, precoCusto, margemLucro);
		
		if(validarData()) {
			throw new IllegalArgumentException ("validade antes do dia de hoje");
		}
		this.dataDeValidade = validade;
		
	}
	
	@Override
	public double valorDeVenda() {
		int diasValidade = LocalDate.now().until(dataDeValidade).getDays();
		double desconto  = 0;
		
		if(LocalDate.now().isAfter(dataDeValidade)) 
			throw new IllegalArgumentException ("Produto Vencido.");
		
		if(diasValidade <= PRAZO_DESCONTO) 
			desconto = DESCONTO;
		
		return (precoCusto * (1 + margemLucro)) * (1- desconto);
	}
	
	public boolean validarData() {
		return this.dataDeValidade.isBefore(LocalDate.now());
	}

	@Override
	public String toString() {
		return "ProdutoPerecivel [dataDeValidade=" + dataDeValidade + ", precoCusto=" + precoCusto + ", margemLucro="
				+ margemLucro + ", valorDeVenda()=" + valorDeVenda() + ", toString()=" + super.toString()
				+ ", getClass()=" + getClass() + ", hashCode()=" + hashCode() + "]";
	}


}
